-- JSON_OBJECT()
SELECT JSON_OBJECT();
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING json);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING json FORMAT JSON);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING jsonb);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING jsonb FORMAT JSON);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING text);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING text FORMAT JSON);
 ?column? 
----------
 {}
(1 row)

SELECT JSON_OBJECT(RETURNING text FORMAT JSON ENCODING UTF8);
ERROR:  cannot set JSON encoding for non-bytea output types
LINE 1: SELECT JSON_OBJECT(RETURNING text FORMAT JSON ENCODING UTF8)...
                                          ^
SELECT JSON_OBJECT(RETURNING text FORMAT JSON ENCODING INVALID_ENCODING);
ERROR:  unrecognized JSON encoding: invalid_encoding
SELECT JSON_OBJECT(RETURNING bytea);
 ?column? 
----------
 \x7b7d
(1 row)

SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON);
 ?column? 
----------
 \x7b7d
(1 row)

SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON ENCODING UTF8);
 ?column? 
----------
 \x7b7d
(1 row)

SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON ENCODING UTF16);
ERROR:  unsupported JSON encoding
LINE 1: SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON ENCODING UTF1...
                                           ^
HINT:  only UTF8 JSON encoding is supported
SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON ENCODING UTF32);
ERROR:  unsupported JSON encoding
LINE 1: SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON ENCODING UTF3...
                                           ^
HINT:  only UTF8 JSON encoding is supported
SELECT JSON_OBJECT('foo': NULL::int FORMAT JSON);
ERROR:  cannot use non-string types with explicit FORMAT JSON clause
LINE 1: SELECT JSON_OBJECT('foo': NULL::int FORMAT JSON);
                                            ^
SELECT JSON_OBJECT('foo': NULL::int FORMAT JSON ENCODING UTF8);
ERROR:  JSON ENCODING clause is only allowed for bytea input type
LINE 1: SELECT JSON_OBJECT('foo': NULL::int FORMAT JSON ENCODING UTF...
                                            ^
SELECT JSON_OBJECT('foo': NULL::json FORMAT JSON);
WARNING:  FORMAT JSON has no effect for json and jsonb types
    ?column?    
----------------
 {"foo" : null}
(1 row)

SELECT JSON_OBJECT('foo': NULL::json FORMAT JSON ENCODING UTF8);
ERROR:  JSON ENCODING clause is only allowed for bytea input type
LINE 1: SELECT JSON_OBJECT('foo': NULL::json FORMAT JSON ENCODING UT...
                                             ^
SELECT JSON_OBJECT('foo': NULL::jsonb FORMAT JSON);
WARNING:  FORMAT JSON has no effect for json and jsonb types
    ?column?    
----------------
 {"foo" : null}
(1 row)

SELECT JSON_OBJECT('foo': NULL::jsonb FORMAT JSON ENCODING UTF8);
ERROR:  JSON ENCODING clause is only allowed for bytea input type
LINE 1: SELECT JSON_OBJECT('foo': NULL::jsonb FORMAT JSON ENCODING U...
                                              ^
SELECT JSON_OBJECT(NULL: 1);
ERROR:  argument 3 cannot be null
HINT:  Object keys should be text.
SELECT JSON_OBJECT('a': 2 + 3);
 ?column?  
-----------
 {"a" : 5}
(1 row)

SELECT JSON_OBJECT('a' VALUE 2 + 3);
 ?column?  
-----------
 {"a" : 5}
(1 row)

--SELECT JSON_OBJECT(KEY 'a' VALUE 2 + 3);
SELECT JSON_OBJECT('a' || 2: 1);
  ?column?  
------------
 {"a2" : 1}
(1 row)

SELECT JSON_OBJECT(('a' || 2) VALUE 1);
  ?column?  
------------
 {"a2" : 1}
(1 row)

--SELECT JSON_OBJECT('a' || 2 VALUE 1);
--SELECT JSON_OBJECT(KEY 'a' || 2 VALUE 1);
SELECT JSON_OBJECT('a': 2::text);
  ?column?   
-------------
 {"a" : "2"}
(1 row)

SELECT JSON_OBJECT('a' VALUE 2::text);
  ?column?   
-------------
 {"a" : "2"}
(1 row)

--SELECT JSON_OBJECT(KEY 'a' VALUE 2::text);
SELECT JSON_OBJECT(1::text: 2);
 ?column?  
-----------
 {"1" : 2}
(1 row)

SELECT JSON_OBJECT((1::text) VALUE 2);
 ?column?  
-----------
 {"1" : 2}
(1 row)

--SELECT JSON_OBJECT(1::text VALUE 2);
--SELECT JSON_OBJECT(KEY 1::text VALUE 2);
SELECT JSON_OBJECT(json '[1]': 123);
ERROR:  key value must be scalar, not array, composite, or json
SELECT JSON_OBJECT(ARRAY[1,2,3]: 'aaa');
ERROR:  key value must be scalar, not array, composite, or json
SELECT JSON_OBJECT(
	'a': '123',
	1.23: 123,
	'c': json '[ 1,true,{ } ]',
	'd': jsonb '{ "x" : 123.45 }'
);
                                ?column?                                
------------------------------------------------------------------------
 {"a" : "123", "1.23" : 123, "c" : [ 1,true,{ } ], "d" : {"x": 123.45}}
(1 row)

SELECT JSON_OBJECT(
	'a': '123',
	1.23: 123,
	'c': json '[ 1,true,{ } ]',
	'd': jsonb '{ "x" : 123.45 }'
	RETURNING jsonb
);
                             ?column?                              
-------------------------------------------------------------------
 {"a": "123", "c": [1, true, {}], "d": {"x": 123.45}, "1.23": 123}
(1 row)

/*
SELECT JSON_OBJECT(
	'a': '123',
	KEY 1.23 VALUE 123,
	'c' VALUE json '[1, true, {}]'
);
*/
SELECT JSON_OBJECT('a': '123', 'b': JSON_OBJECT('a': 111, 'b': 'aaa'));
                   ?column?                    
-----------------------------------------------
 {"a" : "123", "b" : {"a" : 111, "b" : "aaa"}}
(1 row)

SELECT JSON_OBJECT('a': '123', 'b': JSON_OBJECT('a': 111, 'b': 'aaa' RETURNING jsonb));
                  ?column?                   
---------------------------------------------
 {"a" : "123", "b" : {"a": 111, "b": "aaa"}}
(1 row)

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING text));
       ?column?        
-----------------------
 {"a" : "{\"b\" : 1}"}
(1 row)

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING text) FORMAT JSON);
     ?column?      
-------------------
 {"a" : {"b" : 1}}
(1 row)

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING bytea));
            ?column?             
---------------------------------
 {"a" : "\\x7b226222203a20317d"}
(1 row)

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING bytea) FORMAT JSON);
     ?column?      
-------------------
 {"a" : {"b" : 1}}
(1 row)

SELECT JSON_OBJECT('a': '1', 'b': NULL, 'c': 2);
             ?column?             
----------------------------------
 {"a" : "1", "b" : null, "c" : 2}
(1 row)

SELECT JSON_OBJECT('a': '1', 'b': NULL, 'c': 2 NULL ON NULL);
             ?column?             
----------------------------------
 {"a" : "1", "b" : null, "c" : 2}
(1 row)

SELECT JSON_OBJECT('a': '1', 'b': NULL, 'c': 2 ABSENT ON NULL);
       ?column?       
----------------------
 {"a" : "1", "c" : 2}
(1 row)

SELECT JSON_OBJECT(1: 1, '1': NULL WITH UNIQUE);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECT(1: 1, '1': NULL ABSENT ON NULL WITH UNIQUE);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECT(1: 1, '1': NULL NULL ON NULL WITH UNIQUE RETURNING jsonb);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECT(1: 1, '1': NULL ABSENT ON NULL WITH UNIQUE RETURNING jsonb);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 NULL ON NULL WITH UNIQUE);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITH UNIQUE);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITHOUT UNIQUE);
      ?column?      
--------------------
 {"1" : 1, "1" : 1}
(1 row)

SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITH UNIQUE RETURNING jsonb);
ERROR:  duplicate JSON key "1"
SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITHOUT UNIQUE RETURNING jsonb);
 ?column? 
----------
 {"1": 1}
(1 row)

SELECT JSON_OBJECT(1: 1, '2': NULL, '3': 1, 4: NULL, '5': 'a' ABSENT ON NULL WITH UNIQUE RETURNING jsonb);
          ?column?          
----------------------------
 {"1": 1, "3": 1, "5": "a"}
(1 row)

-- JSON_ARRAY()
SELECT JSON_ARRAY();
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING json);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING json FORMAT JSON);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING jsonb);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING jsonb FORMAT JSON);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING text);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING text FORMAT JSON);
 ?column? 
----------
 []
(1 row)

SELECT JSON_ARRAY(RETURNING text FORMAT JSON ENCODING UTF8);
ERROR:  cannot set JSON encoding for non-bytea output types
LINE 1: SELECT JSON_ARRAY(RETURNING text FORMAT JSON ENCODING UTF8);
                                         ^
SELECT JSON_ARRAY(RETURNING text FORMAT JSON ENCODING INVALID_ENCODING);
ERROR:  unrecognized JSON encoding: invalid_encoding
SELECT JSON_ARRAY(RETURNING bytea);
 ?column? 
----------
 \x5b5d
(1 row)

SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON);
 ?column? 
----------
 \x5b5d
(1 row)

SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON ENCODING UTF8);
 ?column? 
----------
 \x5b5d
(1 row)

SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON ENCODING UTF16);
ERROR:  unsupported JSON encoding
LINE 1: SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON ENCODING UTF16...
                                          ^
HINT:  only UTF8 JSON encoding is supported
SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON ENCODING UTF32);
ERROR:  unsupported JSON encoding
LINE 1: SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON ENCODING UTF32...
                                          ^
HINT:  only UTF8 JSON encoding is supported
SELECT JSON_ARRAY('aaa', 111, true, array[1,2,3], NULL, json '{"a": [1]}', jsonb '["a",3]');
                     ?column?                      
---------------------------------------------------
 ["aaa", 111, true, [1,2,3], {"a": [1]}, ["a", 3]]
(1 row)

SELECT JSON_ARRAY('a',  NULL, 'b' NULL   ON NULL);
     ?column?     
------------------
 ["a", null, "b"]
(1 row)

SELECT JSON_ARRAY('a',  NULL, 'b' ABSENT ON NULL);
  ?column?  
------------
 ["a", "b"]
(1 row)

SELECT JSON_ARRAY(NULL, NULL, 'b' ABSENT ON NULL);
 ?column? 
----------
 ["b"]
(1 row)

SELECT JSON_ARRAY('a',  NULL, 'b' NULL   ON NULL RETURNING jsonb);
     ?column?     
------------------
 ["a", null, "b"]
(1 row)

SELECT JSON_ARRAY('a',  NULL, 'b' ABSENT ON NULL RETURNING jsonb);
  ?column?  
------------
 ["a", "b"]
(1 row)

SELECT JSON_ARRAY(NULL, NULL, 'b' ABSENT ON NULL RETURNING jsonb);
 ?column? 
----------
 ["b"]
(1 row)

SELECT JSON_ARRAY(JSON_ARRAY('{ "a" : 123 }' RETURNING text));
           ?column?            
-------------------------------
 ["[\"{ \\\"a\\\" : 123 }\"]"]
(1 row)

SELECT JSON_ARRAY(JSON_ARRAY('{ "a" : 123 }' FORMAT JSON RETURNING text));
       ?column?        
-----------------------
 ["[{ \"a\" : 123 }]"]
(1 row)

SELECT JSON_ARRAY(JSON_ARRAY('{ "a" : 123 }' FORMAT JSON RETURNING text) FORMAT JSON);
     ?column?      
-------------------
 [[{ "a" : 123 }]]
(1 row)

